"""
Django settings for my_pjt project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
from . import config
# 임포트하고 워크벤치에서 커넥트하고 명령어 세 개 입력해서 실행됐는지 확인하고 여기서 다시 마이그레이트 해줘야 함
import my_pjt.my_settings as my_settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party
    "django_seed",
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    # shell_plus 여기 들어있음
    "django_extensions",
    # 사용자 정의 앱
    "users",
    "posts",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'my_pjt.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'my_pjt.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = my_settings.DATABASES

# 커스텀 유저 모델 설정
AUTH_USER_MODEL = "users.CustomUser"

# JWT 설정
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

# JWT 유효기간 설정 
SIMPLE_JWT = {
    # 요청할 때마다 인증을 위해 헤더에 포함해야 하는 토큰
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=1440),
    # 엑세스 토큰이 만료되었을 때, 새로 엑세스 토큰을 발급받기 위한 토큰
    # 만일 리프레시 토큰까지 만료되었다면 다시 인증(로그인)과정이 필요함
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    
    # 로테이션 리프레시 토큰을 True로 하면 새로운 리프레시 토큰을 줄 때, 새로운 액세스 토큰이랑 같이 준다.
    "ROTATE_REFRESH_TOKENS": True,
    
    # 리프레시 토큰이 회전 후 블랙리스트에 자동으로 추가되도록 설정
    # 새로운 리프레시를 줬으면, 이전 리프레시는 이제 유효하지 않아야 하니 그것을 블랙리스트로 넣겠다는 설정.
    # 즉 불랙리스트를 DB에 저장해줘야겠지 (이제 예전 리프레시는 다시 던져도 동작하지 않음!)
    # 즉, 테이블이 필요하니 이 설정 후 migrate 해줘야 한다.
    "BLACKLIST_AFTER_ROTATION": True,
    
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images : 정적 파일은 보통 HTML 페이지에서 CSS/JS 등을 포함할 때 사용)
# 개발자가 제공하는 파일. 주로 탬플릿 작업에서 사용되기 때문에 백엔드인 drf 단에서는 거의 사용할 일이 없다.
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Media files (사용자가 업로드하는 파일 : ImageField, FileField 등)
# 미디어 파일 URL (클라이언트가 접근하는 URL)
MEDIA_URL = '/media/'

# 미디어 파일의 실제 저장 경로 (서버 파일 시스템 경로)
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
